<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title><%= user.username %>'s Profile - TulipParty</title>
  <link rel="stylesheet" href="/css/style.css">
  <link rel="stylesheet" href="/css/aero.css">
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/css/all.min.css">
  <style id="custom-profile-style"></style>
</head>
<body>
  <header>
    <h1>TulipParty</h1>
    <div class="header-links">
      <a href="/" class="back-button">Home</a>
      <a href="/chat" class="create-button">Live Chat</a>
      <a href="/friends" class="create-button"><i class="fas fa-user-friends"></i> Friends</a>
      <a href="/create" class="create-button">New Post</a>
    </div>
  </header>
  
  <main class="profile-container">
    <div class="profile-header">
      <div class="profile-info">
        <img src="/<%= user.profile_pic %>" alt="<%= user.username %>" class="profile-avatar">
        <div>
          <h2><%= user.username %></h2>
          <% if (user.role) { %>
            <div class="user-role"><%= user.role %></div>
          <% } %>
          <div class="profile-actions">
            <button id="add-friend-btn" class="friend-btn"><i class="fas fa-user-plus"></i> Add Friend</button>
            <a href="/edit-profile?postKey=" id="edit-profile-btn" class="edit-btn" style="display:none"><i class="fas fa-edit"></i> Edit Profile</a>
          </div>
        </div>
      </div>
      
      <% if (user.bio) { %>
        <div class="user-bio">
          <h3>Bio</h3>
          <p><%= user.bio %></p>
        </div>
      <% } %>
    </div>
    
    <div id="custom-profile-sections" class="custom-profile-section">
      <!-- Custom profile sections will appear here -->
    </div>
    
    <div class="user-posts-section">
      <h3><%= user.username %>'s Posts</h3>
      <% if (posts && posts.length > 0) { %>
        <div class="posts-list">
          <% posts.forEach(post => { %>
            <article class="post" data-post-id="<%= post.id %>">
              <div class="post-header">
                <div class="post-meta">
                  <h4><a href="/category/<%= post.category_id %>"><%= post.title %></a></h4>
                  <div class="post-category">in <%= post.category_name %></div>
                </div>
                <span class="date"><%= post.date %></span>
              </div>
              <div class="post-content-preview"><%= post.content.substring(0, 150) %><%= post.content.length > 150 ? '...' : '' %></div>
              
              <div class="post-actions">
                <button class="like-btn" data-post-id="<%= post.id %>">
                  <i class="far fa-heart"></i> <span class="like-count">0</span>
                </button>
                <button class="favorite-btn" data-post-id="<%= post.id %>">
                  <i class="far fa-star"></i> Favorite
                </button>
                <button class="repost-btn" data-post-id="<%= post.id %>">
                  <i class="fas fa-retweet"></i> Repost
                </button>
              </div>
            </article>
          <% }) %>
        </div>
      <% } else { %>
        <p class="no-posts">This user hasn't made any posts yet.</p>
      <% } %>
    </div>
  </main>
  
  <!-- Friend Request Modal -->
  <div id="friend-modal" class="modal">
    <div class="modal-content">
      <span class="close-modal">&times;</span>
      <h2>Add Friend Request</h2>
      <p>Enter your post key to send a friend request to <%= user.username %></p>
      <input type="text" id="friend-post-key" placeholder="Your post key" class="input-field">
      <div class="request-message" id="friend-request-message"></div>
      <button id="send-friend-request" class="submit-button">Send Request</button>
    </div>
  </div>
  
  <!-- Repost Modal -->
  <div id="repost-modal" class="modal">
    <div class="modal-content">
      <span class="close-modal">&times;</span>
      <h2>Repost</h2>
      <p>Enter your post key and optional comment</p>
      <textarea id="repost-comment" placeholder="Add a comment (optional)" class="input-field"></textarea>
      <input type="text" id="repost-post-key" placeholder="Your post key" class="input-field">
      <div class="request-message" id="repost-message"></div>
      <button id="confirm-repost" class="submit-button">Repost</button>
    </div>
  </div>
  
  <!-- Add this script element before the Social Interaction Script -->
  <script id="profile-customization-data" type="application/json">
    <%= JSON.stringify(user.profile_customization || {}) %>
  </script>
  
  <!-- Social Interaction Script -->
  <script>
    document.addEventListener('DOMContentLoaded', function() {
      // Custom Profile Rendering
      const customProfileSections = document.getElementById('custom-profile-sections');
      const customProfileStyle = document.getElementById('custom-profile-style');
      
      // Load profile customization data
      try {
        const profileCustomizationData = document.getElementById('profile-customization-data');
        let profileCustomization;
        try {
          profileCustomization = profileCustomizationData ? JSON.parse(profileCustomizationData.textContent) : null;
          console.log("Parsed profile customization:", profileCustomization); // Add this for debugging
        } catch (e) {
          console.error("Error parsing profile customization:", e);
          profileCustomization = null;
        }
        
        if (profileCustomization && Object.keys(profileCustomization).length > 0) {
          // Apply custom styles
          if (profileCustomization.style) {
            const styleElement = document.getElementById('custom-profile-style');
            styleElement.textContent = `
              #custom-profile-sections {
                background-color: ${profileCustomization.style.backgroundColor || '#ffffff'};
                color: ${profileCustomization.style.textColor || '#000000'};
                padding: 20px;
                border-radius: 5px;
                margin-bottom: 20px;
                border: 1px solid #00ccff;
              }
              
              body.aero-mode #custom-profile-sections {
                background-color: ${profileCustomization.style.backgroundColor || 'rgba(255, 255, 255, 0.7)'};
                border-color: rgba(0, 120, 215, 0.3);
              }
              
              #custom-profile-sections a {
                color: #00ccff;
              }
              
              body.aero-mode #custom-profile-sections a {
                color: #0078d7;
              }
            `;
          }
          
          // Render sections
          if (profileCustomization.sections && profileCustomization.sections.length > 0) {
            profileCustomization.sections.forEach(section => {
              const sectionElement = document.createElement('div');
              sectionElement.className = `custom-section ${section.type}-section`;
              
              switch (section.type) {
                case 'heading':
                  const headingTag = section.size || 'h2';
                  sectionElement.innerHTML = `<${headingTag}>${section.text || ''}</${headingTag}>`;
                  break;
                  
                case 'text':
                  sectionElement.innerHTML = `<p>${(section.text || '').replace(/\n/g, '<br>')}</p>`;
                  break;
                  
                case 'marquee':
                  const speed = section.speed || 'medium';
                  let duration = '20s';
                  
                  if (speed === 'slow') duration = '30s';
                  if (speed === 'fast') duration = '10s';
                  
                  sectionElement.innerHTML = `
                    <div class="custom-marquee-container">
                      <div class="custom-marquee-content" style="color: ${section.color || '#00ccff'}; animation-duration: ${duration}">
                        <span>${section.text || ''}</span>
                        <span>${section.text || ''}</span>
                      </div>
                    </div>
                  `;
                  break;
                  
                case 'image':
                  if (section.path) {
                    sectionElement.innerHTML = `<img src="${section.path}" alt="User image" class="custom-profile-image">`;
                  }
                  break;
                  
                case 'link':
                  if (section.url) {
                    // Make sure URL has protocol
                    let url = section.url;
                    if (!url.startsWith('http://') && !url.startsWith('https://')) {
                      url = 'https://' + url;
                    }
                    
                    sectionElement.innerHTML = `<a href="${url}" target="_blank" rel="noopener noreferrer">${section.text || url}</a>`;
                  }
                  break;
              }
              
              customProfileSections.appendChild(sectionElement);
            });
          } else {
            customProfileSections.style.display = 'none';
          }
        } else {
          customProfileSections.style.display = 'none';
        }
      } catch(e) {
        console.error('Error rendering custom profile:', e);
        customProfileSections.style.display = 'none';
      }
      
      // Friend request functionality
      const friendModal = document.getElementById('friend-modal');
      const addFriendBtn = document.getElementById('add-friend-btn');
      const closeModal = document.querySelector("#friend-modal .close-modal");
      const sendRequestBtn = document.getElementById('send-friend-request');
      const friendMessage = document.getElementById('friend-request-message');
      
      // Check for post key to allow profile editing
      const urlParams = new URLSearchParams(window.location.search);
      const postKey = urlParams.get('key');
      
      if (postKey) {
        // Validate if this post key matches the profile owner
        fetch('/validate-profile-owner', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json'
          },
          body: JSON.stringify({ postKey, username: '<%= user.username %>' })
        })
        .then(response => response.json())
        .then(data => {
          if (data && data.success) {
            // Show edit button and set the href
            const editBtn = document.getElementById('edit-profile-btn');
            editBtn.href = `/edit-profile?postKey=${encodeURIComponent(postKey)}`;
            editBtn.style.display = 'inline-block';
          }
        })
        .catch(err => {
          console.error('Error validating profile owner:', err);
        });
      }
      
      // Open modal when Add Friend button is clicked
      addFriendBtn.addEventListener('click', function() {
        friendModal.style.display = "block";
      });
      
      // Close modal when X is clicked
      closeModal.addEventListener('click', function() {
        friendModal.style.display = "none";
        friendMessage.textContent = "";
        document.getElementById('friend-post-key').value = "";
      });
      
      // Send friend request
      sendRequestBtn.addEventListener('click', function() {
        const postKey = document.getElementById('friend-post-key').value.trim();
        if (!postKey) {
          friendMessage.textContent = "Please enter your post key";
          friendMessage.classList.add('error');
          return;
        }
        
        fetch(`/add-friend/<%= user.username %>`, {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json'
          },
          body: JSON.stringify({ postKey })
        })
        .then(response => response.json())
        .then(data => {
          friendMessage.textContent = data.message;
          friendMessage.className = 'request-message';
          friendMessage.classList.add(data.success ? 'success' : 'error');
          
          if (data.success) {
            setTimeout(() => {
              friendModal.style.display = "none";
              friendMessage.textContent = "";
              document.getElementById('friend-post-key').value = "";
            }, 2000);
          }
        })
        .catch(err => {
          friendMessage.textContent = "An error occurred. Please try again.";
          friendMessage.classList.add('error');
        });
      });
      
      // Like, Favorite, and Repost functionality
      document.querySelectorAll('.like-btn').forEach(btn => {
        btn.addEventListener('click', function() {
          const postId = this.dataset.postId;
          const postKey = prompt('Enter your post key to like this post:');
          if (!postKey) return;
          
          fetch(`/like-post/${postId}`, {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ postKey })
          })
          .then(response => response.json())
          .then(data => {
            if (data.success) {
              const icon = this.querySelector('i');
              if (data.action === 'liked') {
                icon.className = 'fas fa-heart';
                const countElement = this.querySelector('.like-count');
                countElement.textContent = parseInt(countElement.textContent) + 1;
              } else {
                icon.className = 'far fa-heart';
                const countElement = this.querySelector('.like-count');
                countElement.textContent = parseInt(countElement.textContent) - 1;
              }
            } else {
              alert(data.message);
            }
          });
        });
      });
      
      document.querySelectorAll('.favorite-btn').forEach(btn => {
        btn.addEventListener('click', function() {
          const postId = this.dataset.postId;
          const postKey = prompt('Enter your post key to favorite this post:');
          if (!postKey) return;
          
          fetch(`/favorite-post/${postId}`, {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ postKey })
          })
          .then(response => response.json())
          .then(data => {
            if (data.success) {
              const icon = this.querySelector('i');
              if (data.action === 'favorited') {
                icon.className = 'fas fa-star';
              } else {
                icon.className = 'far fa-star';
              }
            } else {
              alert(data.message);
            }
          });
        });
      });
      
      // Repost functionality
      const repostModal = document.getElementById('repost-modal');
      const closeRepostModal = document.querySelector("#repost-modal .close-modal");
      const confirmRepostBtn = document.getElementById('confirm-repost');
      const repostMessage = document.getElementById('repost-message');
      let currentPostId;
      
      document.querySelectorAll('.repost-btn').forEach(btn => {
        btn.addEventListener('click', function() {
          currentPostId = this.dataset.postId;
          repostModal.style.display = "block";
        });
      });
      
      closeRepostModal.addEventListener('click', function() {
        repostModal.style.display = "none";
        repostMessage.textContent = "";
        document.getElementById('repost-comment').value = "";
        document.getElementById('repost-post-key').value = "";
      });
      
      confirmRepostBtn.addEventListener('click', function() {
        const comment = document.getElementById('repost-comment').value;
        const postKey = document.getElementById('repost-post-key').value.trim();
        
        if (!postKey) {
          repostMessage.textContent = "Please enter your post key";
          repostMessage.classList.add('error');
          return;
        }
        
        fetch(`/repost/${currentPostId}`, {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({ postKey, comment })
        })
        .then(response => response.json())
        .then(data => {
          repostMessage.textContent = data.message;
          repostMessage.className = 'request-message';
          repostMessage.classList.add(data.success ? 'success' : 'error');
          
          if (data.success) {
            setTimeout(() => {
              repostModal.style.display = "none";
              repostMessage.textContent = "";
              document.getElementById('repost-comment').value = "";
              document.getElementById('repost-post-key').value = "";
            }, 2000);
          }
        });
      });
    });
  </script>
  
  <footer>
    <p>&copy; <%= new Date().getFullYear() %> TulipParty - Argatha's chatting tool</p>
  </footer>
  <script src="/js/aeroEasterEgg.js"></script>
  <script src="/js/signupKeySequence.js"></script>
</body>
</html>
